// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole       @default(USER)
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  topic         Topic[]
  event         Event[]
  events        UsersOnEvent[]
  comment       Comment[]
  degree        Degree[]
}

model Profile {
  id                  String    @id @default(cuid())
  username            String
  bio                 String
  degreeId            String
  resultPublishedDate DateTime? @db.Date
  jobStatus           JobStatus @default(UNEMPLOYED)
  designation         String?
  company             String?
  joiningDate         DateTime? @db.Date
  userId              String    @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  degree Degree @relation(fields: [degreeId], references: [id], onDelete: Cascade)
}

enum JobStatus {
  EMPLOYED
  UNEMPLOYED
}

model Degree {
  id               String    @id @default(cuid())
  name             String    @unique
  department       String
  createdByUserId  String
  createdByUser    User      @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  BelongsToProfile Profile[]
}

enum UserRole {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String         @id @default(cuid())
  title       String
  userId      String
  attendees   UsersOnEvent[]
  date        DateTime       @db.Timestamptz(3)
  description String
  banner      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  organizedBy User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsersOnEvent {
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@id([userId, eventId])
}

model Topic {
  id        String    @id @default(cuid())
  title     String
  details   String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  userId    String
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
